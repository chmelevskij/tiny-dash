const curry=(b,a=[])=>(...c)=>(c=>c.length==b.length?b(...c):curry(b,c))([...a,...c]),pipe=(...a)=>a.reduce((a,b)=>c=>b(a(c))),compose=(...a)=>a.reduceRight((a,b)=>c=>b(a(c))),T=["concat","entries","every","filter","find","findIndex","includes","indexOf","join","keys","lastIndexOf","map","reduce","reduceRight","slice","some","sort","values"].reduce((a,b)=>(a[b]=curry((a,c)=>Array.prototype[b].call(c,a)),a),{});T.pipe=pipe,T.curry=curry,T.compose=compose;export default T;